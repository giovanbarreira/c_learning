1-Code an app that writes 'Hello' in the terminal.

2-a.Code an app that asks a name and an age and then writes 'name is age years old'.
b.Solve again using struct.

3-a.Code an app that asks a car model, a year, a color and then writes
'model: model
year: year
color: color'
b.Solve again using struct.

4-Code an app that asks a number, then writes the 'table' of that number.

5-Code an app that asks for a geometric shape, from square, circle, rectangle, then asks for the measures of the shape, then calculates the surface and writes on the terminal.

6-Code an app that asks for a number and for the inferior and superior limits of range. Then generates the number of random values inside the range. Then shows those values, the highest, the lowest and the arithmetic mean. 

7-Repeat the 1, but use function.

8-Repeat the 2, but use function.

9-Repeat the 3, but use function.

10-Repeat the 4, but use function.

11-Repeat the 5, but use function.

12-Repeat the 6, but use function.

13-Repeat the 1, but use a static lib.

14-Repeat the 2, but use a static lib.

15-Repeat the 3, but use a static lib.

16-Repeat the 4, but use a static lib.

17-Repeat the 5, but use a static lib.

18-Repeat the 6, but use a static lib.

19-Repeat the 1, but use a dynamic lib.

20-Repeat the 2, but use a dynamic lib.

21-Repeat the 3, but use a dynamic lib.

22-Repeat the 4, but use a dynamic lib.

23-Repeat the 5, but use a dynamic lib.

24-Repeat the 6, but use a dynamic lib.

25-Repeat the 1, but writes in a txt file.

26-Repeat the 2, but writes in a txt file.

27-Repeat the 3, but writes in a txt file.

28-Repeat the 4, but writes in a txt file.

29-Repeat the 5, but writes in a txt file.

30-Repeat the 6, but writes in a txt file.

31-a.Code an app that asks a week day and writes 'weekend' in the terminal if it reads Saturday or Sunday.
b.Solve again using enum.
c.Solve again using enum and function.
d.Solve again using enum and static lib.
e.Solve again using enum and dynamic lib.

Exercise 32: Connect to a Database
Write a C program to connect to a SQLite database. Ensure the connection is successful and print a message indicating the connection status.

Exercise 33: Create a Table
Create a table named students with columns id, name, and age in the SQLite database. Write a C program to execute this SQL command.

Exercise 34: Insert Data
Write a C program to insert a new student record into the students table. Use prepared statements to insert the values id = 1, name = "John Doe", and age = 20.

Exercise 35: Retrieve Data
Write a C program to retrieve and display all records from the students table. Print the id, name, and age of each student.

Exercise 36: Update Data
Write a C program to update the age of the student with id = 1 to 21. Use prepared statements to execute the update.

Exercise 37: Delete Data
Write a C program to delete the student record with id = 1 from the students table. Ensure the deletion is successful and print a confirmation message.

Exercise 38: Count Records
Write a C program to count the number of records in the students table and print the total count.

Exercise 39: Search by Name
Write a C program to search for a student by name in the students table. Print the details of the student if found.

Exercise 40: List Students by Age
Write a C program to list all students in the students table, ordered by their age in ascending order.

Exercise 41: Backup Database
Write a C program to create a backup of the SQLite database by copying the database file to a new location.



To solve these activities, keep in mind:

Descriptive Names: Use meaningful and descriptive names that convey the purpose of the variable. For example, totalAmount is more informative than x.

Use Camel Case: For variables with multiple words, use camel case (e.g., totalAmount, userName). This improves readability.

Avoid Single Letter Names: Except for loop counters (e.g., i, j), avoid single-letter variable names. They can be confusing and lack context.

Consistent Naming Conventions: Stick to a consistent naming convention throughout your codebase. This makes your code easier to read and maintain.

Prefix for Global Variables: If you have global variables, consider using a prefix to distinguish them (e.g., g_totalAmount).

Avoid Reserved Keywords: Ensure that your variable names do not conflict with C's reserved keywords (e.g., int, float, return).

Use Underscores for Constants: For constants, use all uppercase letters with underscores (e.g., MAX_BUFFER_SIZE).

Keep It Short and Simple: While being descriptive, try to keep variable names concise. Long names can be cumbersome to type and read.

Avoid Abbreviations: Unless they are widely understood, avoid abbreviations. For example, use customerName instead of custNm.

Comment Your Code: If a variable name might not be immediately clear, add a comment explaining its purpose.